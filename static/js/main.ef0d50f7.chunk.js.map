{"version":3,"sources":["firebase.js","Login.js","SignUp.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Login","props","className","type","name","id","value","wish","readOnly","htmlFor","model","why","cols","rows","steps","onClick","handleReset","SignUp","handleChange","e","setState","target","state","handleSignUp","this","onChange","event","Component","App","login","key","preventDefault","userList","loginId","pass","alert","username","password","showLogin","showSignUp","signUp","newSignUp","counter","newObject","database","ref","push","showHide","on","response","newState","data","val","title","action","onSubmit","hideOnSubmit","placeholder","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ef0d50f7.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\nimport \"firebase/database\";\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyC7S_BsnuhDyNqCzSBSzVM6Ml4-4EYHsNk\",\r\n    authDomain: \"secret-ror.firebaseapp.com\",\r\n    databaseURL: \"https://secret-ror.firebaseio.com\",\r\n    projectId: \"secret-ror\",\r\n    storageBucket: \"secret-ror.appspot.com\",\r\n    messagingSenderId: \"595556304132\",\r\n    appId: \"1:595556304132:web:6bcc611a61feae62bd7c51\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  export default firebase;","import React from 'react';\r\nimport \"./App.css\";\r\n\r\nconst Login = (props) => {\r\n\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <blockquote>“Goals. There’s no telling what you can do when you get inspired by them. There’s no telling what you can do when you believe in them. And there’s no telling what will happen when you act upon them.” —Jim Rohn</blockquote>\r\n                <div className=\"login\">\r\n                    <div className=\"text\">\r\n                        <input type=\"text\" name=\"wish\" id=\"wish\" value={props.wish} readOnly/>\r\n                        <label htmlFor=\"wish\">Your Wish/ Goal/ Requirement</label>\r\n                    </div>\r\n                    <div className=\"text\">\r\n                        <input type=\"text\" name=\"model\" id=\"model\" value={props.model} readOnly/>\r\n                        <label htmlFor=\"model\">Your Role Model</label>\r\n                    </div>\r\n                    <div className=\"text\">\r\n                        <input type=\"text\" name=\"why\" id=\"why\" value={props.why} readOnly/>\r\n                        <label htmlFor=\"why\">Why is that a wish</label>\r\n                    </div>\r\n                    <div className=\"text\">\r\n                        <textarea name=\"steps\" id=\"steps\" cols=\"30\" rows=\"10\" value={props.steps} readOnly></textarea>\r\n                        <input type=\"text\" name=\"steps\" id=\"steps\" value={props.steps} />\r\n                    </div>\r\n                    <button onClick={props.handleReset}>Sign Out</button>\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default Login\r\n","import React, { Component } from 'react';\r\nimport \"./App.css\";\r\n\r\nclass SignUp extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            wish: \"\",\r\n            model: \"\",\r\n            why: \"\",\r\n            steps: \"\"\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id] : e.target.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { handleSignUp } = this.props;\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <blockquote>\r\n                    “If you want to be happy, set a goal that commands your thoughts, liberates your energy and inspires your hopes.” —Andrew Carnegie\r\n                </blockquote>\r\n                <div className=\"signUp\">\r\n                    <div className=\"text\">\r\n                        <input type=\"text\" name=\"wish\" id=\"wish\" value={this.state.wish} onChange={this.handleChange} />\r\n                        <label htmlFor=\"wish\">Your Wish/ Goal/ Requirement</label>\r\n                    </div>\r\n                    <div className=\"text\" >\r\n                        <input type=\"text\" name=\"model\" id=\"model\" value={this.state.model} onChange={this.handleChange} />\r\n                        <label htmlFor=\"model\">Your Role Model</label>\r\n                    </div>\r\n                    <div className=\"text\">\r\n                        <input type=\"text\" name=\"why\" id=\"why\" value={this.state.why} onChange={this.handleChange} />\r\n                        <label htmlFor=\"why\">Why is that a wish</label>\r\n                    </div>\r\n                    <div className=\"text\">\r\n                        <textarea name=\"steps\" id=\"steps\" cols=\"30\" rows=\"10\" value={this.state.steps} onChange={this.handleChange} ></textarea>\r\n                        {/* <input type=\"text\" name=\"steps\" id=\"steps\" value={this.state.steps} onChange={this.handleChange} /> */}\r\n                        <label htmlFor=\"steps\">Steps to reach your goal</label>\r\n                    </div>\r\n                    <button onClick={(event) => handleSignUp(event, this.state.wish, this.state.model, this.state.why, this.state.steps)}>Submit</button>\r\n                    <button onClick={this.props.handleReset}>Sign Out</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SignUp\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport firebase from './firebase';\nimport Login from './Login';\nimport SignUp from './SignUp';\n\nclass App extends Component {\n  constructor()\n  {\n    super();\n    this.state = {\n      username: \"\",\n      password: \"\",\n      wish: \"\",\n      model: \"\",\n      why: \"\",\n      steps: \"\",\n      userList: [],\n      showLogin: false,\n      showSignUp: false,\n      loginId: \"\",\n      pass: \"\",\n      counter: 0\n    }\n  }\n  componentDidMount()\n  {\n    // create reference to firebase\n    const dbRef = firebase.database().ref();\n    dbRef.on(\"value\", (response) => {\n        // organizing data in firebase\n        const newState = [];\n        const data = response.val();\n        for (const key in data) {\n            newState.push({\n                key: key,\n                title: data[key],\n                username: data[key].username,\n                password: data[key].password,\n                model: data[key].model,\n                wish: data[key].wish,\n                why: data[key].why,\n                steps: data[key].steps\n            });\n        }\n        // update React state for new user\n        this.setState({\n            userList: newState\n        });\n    })\n  }\n\n  // grabbing value in input field on change\n  handleChange = (e) => {\n    this.setState({\n     [e.target.id] : e.target.value\n    });\n  }\n  \n  // checking if user exists and then getting data from firebase\n  login = (e) => {\n    e.preventDefault();\n    for (const key in this.state.userList) {\n      if (this.state.loginId === \"\" || this.state.pass === \"\"){\n        alert(\"Username/password necessary for logging in.\");\n        return false;\n      } else if (this.state.loginId === this.state.userList[key].username) {\n        if (this.state.pass === this.state.userList[key].password) {\n          this.setState ({\n            username: this.state.userList[key].username,\n            wish: this.state.userList[key].wish,\n            model: this.state.userList[key].model,\n            steps: this.state.userList[key].steps,\n            why: this.state.userList[key].why,\n            showLogin: true,\n            showSignUp: false\n          });\n          return null;\n        } else {\n          this.setState ({\n            showLogin: false,\n            showSignUp: false\n          })\n          alert(\"Username/password does not match. Please try again.\");\n          return null;\n        }\n      }\n    }\n    alert(\"Username/password does not match. Please try again.\");\n  }\n\n  // checking for signUp\n  signUp = (e) => {\n    e.preventDefault();\n    for (const key in this.state.userList) {\n      if (this.state.loginId === \"\" || this.state.pass === \"\"){\n        alert(\"Username/password necessary for signing up.\");\n        return false;\n      }\n      if (this.state.loginId === this.state.userList[key].username) {\n          alert(\"Username already exist. Please try different username\");\n          return false;\n      }\n    }\n    const username = this.state.loginId;\n    const password = this.state.pass;\n    this.setState({\n      username,\n      password,\n      showLogin: false,\n      showSignUp: true\n    })\n  }\n\n  // submit the data from user to firebase\n  newSignUp = (event, wish, model, why, steps) => {\n    event.preventDefault();\n    // counter used to stop user from resubmitting\n    if (this.state.counter !== 0) {\n      alert(\"already submited. Can't resubmit.\")\n      return null;\n    }\n    const newObject = {\n      username: this.state.username,\n      password: this.state.password,\n      wish,\n      model,\n      why,\n      steps\n    }\n    this.setState ({\n      counter: 1\n    })\n    const dbRef = firebase.database().ref();\n    // add new record to Firebase\n    dbRef.push(newObject);\n    alert(\"Now any time you feel lost, visit Room of Requirement to remind you of your path.\")\n  }\n\n  // reseting to initial setup when clicked of signout\n  handleReset = (event) => {\n    event.preventDefault();\n    this.setState ({\n      username: \"\",\n      password: \"\",\n      wish: \"\",\n      model: \"\",\n      why: \"\",\n      steps: \"\",\n      userList: [],\n      showLogin: false,\n      showSignUp: false,\n      loginId: \"\",\n      pass: \"\",\n      showHide: true,\n      counter: 0\n    })\n  }\n\n  \n  render(){\n    return (\n      <div className=\"wrapper\">\n        <div className=\"App\">\n          <h1>Room of Requirement</h1>\n          {(this.state.showLogin || this.state.showSignUp) ? null : (\n          <form action=\"submit\" className=\"mainForm\" onSubmit={this.hideOnSubmit}>\n            <input type=\"text\" id=\"loginId\" placeholder=\"username\" onChange={this.handleChange} value={this.state.loginId}/>\n            <input type=\"password\" id=\"pass\" placeholder=\"password\" onChange={this.handleChange} value={this.state.pass}/>\n            <div>\n              <button onClick={this.login}>Login</button>\n              <button onClick={this.signUp}>SignUp</button>\n            </div>\n            <h2>Write your Wish / Goal / Requirement, and we will keep it safe for when you need reminding of your path.</h2>\n          </form>\n          )}\n          <form action=\"submit\">\n            {this.state.showLogin ? (<Login \n            wish={this.state.wish}\n            steps={this.state.steps}\n            model={this.state.model}\n            why={this.state.why}\n            handleReset={this.handleReset}\n            />) : null}\n            {this.state.showSignUp ? <SignUp handleSignUp={this.newSignUp} handleReset={this.handleReset}/> : null}\n          </form>\n          <footer><p>Created by Sahil Momin <a href=\"https://junocollege.com/\" target=\"_blank\" rel=\"noopener noreferrer\">@ Juno College</a></p></footer>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}